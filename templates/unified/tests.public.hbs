import { test, expect } from '@playwright/test';
import { testConfig } from '../config/test-config.js';
import { publicRoutes } from '../routes/public-routes.js';

test.describe('Public Routes Testing', () => {
  test.beforeEach(async ({ page }) => {
    // Set timeout for each test
    test.setTimeout(testConfig.timeout);
  });

  // Iterate through all public routes from JSON file
  publicRoutes.forEach(({ url, title, expectedStatus, keyElement, timeout }) => {
    test(`${title || `Route ${url}`} should be accessible without authentication`, async ({ page }) => {
      // Set custom timeout if specified for this route
      if (timeout) {
        test.setTimeout(timeout);
      }
      
      console.log(`🌐 Testing public route: ${url}`);
      
      // Navigate to the route
      const response = await page.goto(`${testConfig.baseURL}${url}`);
      
      // Wait for page to load
      await page.waitForLoadState('networkidle');
      
      // Verify we're not redirected to login pages
      expect(page.url()).not.toContain(testConfig.loginURL);
      expect(page.url()).not.toContain('/login');
      expect(page.url()).not.toContain('/signin');
      expect(page.url()).not.toContain('/auth');
      
      // Check response status
      if (expectedStatus) {
        expect(response?.status()).toBe(expectedStatus);
      } else {
        expect(response?.status()).toBeLessThan(400);
      }
      
      // Verify page has content
      const body = await page.locator('body').textContent();
      expect(body?.length).toBeGreaterThan(0);
      
      // Check for key elements if specified (can be null)
      if (keyElement) {
        try {
          await expect(page.locator(keyElement)).toBeVisible({ timeout: 10000 });
          console.log(`✅ Key element found: ${keyElement}`);
        } catch (error) {
          console.warn(`⚠️ Key element not found or not visible: ${keyElement}`);
          // Don't fail the test - just log the warning
        }
      }
      
      {{#ifFramework "nextjs"}}
      // Next.js specific error checks
      await expect(page.locator('body')).not.toHaveText(/Application error/i);
      await expect(page.locator('body')).not.toHaveText(/500 - Internal Server Error/i);
      await expect(page.locator('body')).not.toHaveText(/404 - This page could not be found/i);
      {{/ifFramework}}
      
      {{#ifFramework "react"}}
      // React specific checks  
      const reactRoot = page.locator('#root, #app, [data-reactroot]').first();
      if (await reactRoot.count() > 0) {
        await expect(reactRoot).toBeVisible();
      }
      {{/ifFramework}}
      
      console.log(`✅ ${title || `Route ${url}`} loaded successfully`);
    });
  });
  
  test.afterAll(async () => {
    console.log(`📊 Completed testing ${publicRoutes.length} public routes`);
  });
});